package views

import (
	"crapp-go/internal/models"
	"crapp-go/views/components"
	"strconv"
)

templ AssessmentPage(question models.Question, currentIndex, totalQuestions int, errorMessage string, settingsJSON string) {
	@components.Panel() {
		<form hx-post="/assessment/next" hx-target="main#content" hx-swap="innerHTML" id="symptom-form" novalidate>
			<input type="hidden" name="questionId" value={ question.ID }/>
			
			<div class="min-h-[80px]">
				if errorMessage != "" {
					@components.Alert(errorMessage, "error")
				}
			</div>

			<div class="progress-indicator">
				Question { strconv.Itoa(currentIndex + 1) } of { strconv.Itoa(totalQuestions) }
			</div>

			<div class="form-group" data-question-id={ question.ID }>
				<h3>{ question.Title }</h3>
				<p>{ question.Description }</p>

				switch question.Type {
				case "radio":
					<div class="symptom-scale">
						for _, option := range question.Options {
							@components.RadioOption(option, question.ID, question.Required)
						}
					</div>
				case "drop_down":
					@components.DropDown(question)
				case "text":
					<textarea name="answer" class="text-input" placeholder={ question.Placeholder } maxlength={ strconv.Itoa(question.MaxLength) }></textarea>

				case "cpt", "dst", "tmt":
					// A hidden input named "answer" is rendered ONLY for these types.
					<input type="hidden" name="answer" value=""/>
					
					// The component is called with the settingsJSON string from the handler.
					if question.Type == "cpt" {
						@components.CPT(question.ID, settingsJSON)
					} else if question.Type == "dst" {
						@components.DST(question.ID, settingsJSON)
					} else if question.Type == "tmt" {
						@components.TMT(question.ID, settingsJSON)
					}
				}
			</div>

			<div class="navigation-buttons mt-8">
				if currentIndex > 0 {
					<button type="button" hx-post="/assessment/prev" hx-target="main#content" class="secondary-button">Previous</button>
				} else {
					<div></div>
				}
				if question.Type != "cpt" && question.Type != "dst" && question.Type != "tmt" || !question.Required {
					<button type="submit" class="primary-button">Next</button>
				}
			</div>
		</form>
	}
}