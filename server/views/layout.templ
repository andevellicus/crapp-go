package views

import "crapp-go/views/common"
import "fmt"

templ Layout(title string, isLoggedIn bool, csrfToken string, cspNonce string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta name="csrf-token" content={ csrfToken }/>
			<meta name="csp-nonce" content={ cspNonce }/>
			<title>{ title }</title>
			<script src="https://unpkg.com/htmx.org@1.9.12"></script>
			<script src="https://unpkg.com/hyperscript.org@0.9.12"></script>
			<script src="https://unpkg.com/htmx.org/dist/ext/response-targets.js"></script>
			<link rel="preconnect" href="https://fonts.googleapis.com" />
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
			<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
			<link href="/assets/css/style.css" rel="stylesheet"/>
			if isLoggedIn {
				<script src="/assets/js/interaction-tracker.js" defer></script>
				// Load the cognitive test JS files upfront
				<script src="/assets/js/cpt.js" defer></script>
				<script src="/assets/js/dst.js" defer></script>
				<script src="/assets/js/tmt.js" defer></script>
			}
		</head>
		<body class="bg-base-300 font-sans" data-is-logged-in={ fmt.Sprintf("%v", isLoggedIn) }>
			<div class="container mx-auto max-w-3xl py-8">
				@common.Header()
				@common.Nav(isLoggedIn)
				<main id="content" class="bg-base-100 shadow-xl rounded-b-lg">
					{ children... }
				</main>
				@common.Footer()
			</div>

			<script nonce={ cspNonce }>
				// This CSRF handler is needed on all pages, logged in or out.
				document.body.addEventListener('htmx:configRequest', function(evt) {
					let csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
					if (csrfToken) {
						evt.detail.headers['X-CSRF-Token'] = csrfToken;
					}
				});

				if (document.body.dataset.isLoggedIn === 'true') {
					// Central callback for when any cognitive test finishes
					function onTestEnd(htmx) {
						return function(results) {
							const form = document.querySelector('#symptom-form');
							if (form) {
								const answerInput = form.querySelector('input[name="answer"]');
								answerInput.value = JSON.stringify(results);
								htmx.trigger(form, 'submit');
							}
						}
					}
					
					// Reusable Initializer Function
					function initializeCognitiveTests(node) {
						if (!(node instanceof Element)) return;

						const findAndInit = (containerId, initFn) => {
							const target = node.matches(`#${containerId}`) ? node : node.querySelector(`#${containerId}`);
							if (target && target.dataset.initialized !== 'true') {
								const settings = JSON.parse(target.dataset.settings);
								initFn(target.id, settings, onTestEnd(htmx));
								target.dataset.initialized = 'true';
							}
						};

						findAndInit('cpt-container', initCPT);
						findAndInit('dst-container', initDST);
						findAndInit('tmt-container', initTMT);
					}

					// Observer for content added by HTMX
					const observer = new MutationObserver((mutationsList) => {
						for (const mutation of mutationsList) {
							for (const addedNode of mutation.addedNodes) {
								initializeCognitiveTests(addedNode);
							}
						}
					});
					observer.observe(document.getElementById('content'), { childList: true, subtree: true });

					// Initial check on page load
					document.addEventListener('DOMContentLoaded', () => {
						initializeCognitiveTests(document.body);
					});
				}
			</script>		
		</body>
	</html>
}