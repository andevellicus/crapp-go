package views

import "crapp-go/views/common"

templ Layout(title string, isLoggedIn bool, csrfToken string, cspNonce string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta name="csrf-token" content={ csrfToken }/>
			<meta name="csp-nonce" content={ cspNonce }/>
			<title>{ title }</title>
			<script src="https://unpkg.com/htmx.org@1.9.12"></script>
			<script src="https://unpkg.com/hyperscript.org@0.9.12"></script>
			<script src="https://unpkg.com/htmx.org/dist/ext/response-targets.js"></script>
			<link rel="preconnect" href="https://fonts.googleapis.com" />
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
			<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
			<link href="/assets/css/style.css" rel="stylesheet"/>
			if isLoggedIn {
				<script src="/assets/js/interaction-tracker.js" defer></script>
				// Load the cognitive test JS files upfront
				<script src="/assets/js/cpt.js" defer></script>
				<script src="/assets/js/dst.js" defer></script>
				<script src="/assets/js/tmt.js" defer></script>
			}
		</head>
		<body class="bg-base-300 font-sans">
			<div class="container mx-auto max-w-3xl py-8">
				@common.Header()
				@common.Nav(isLoggedIn)
				<main id="content" class="bg-base-100 shadow-xl rounded-b-lg">
					{ children... }
				</main>
				@common.Footer()
			</div>

			<script nonce={ cspNonce }>
				// Handles CSRF token for HTMX requests
				document.body.addEventListener('htmx:configRequest', function(evt) {
					let csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
					if (csrfToken) {
						evt.detail.headers['X-CSRF-Token'] = csrfToken;
					}
				});

				// Central callback for when any cognitive test finishes
				function onTestEnd(htmx) {
					return function(results) {
						const form = document.querySelector('#symptom-form');
						if (form) {
							const answerInput = form.querySelector('input[name="answer"]');
							answerInput.value = JSON.stringify(results);
							htmx.trigger(form, 'submit');
						}
					}
				}

				// --- Reusable Initializer Function ---
				function initializeCognitiveTests(rootElement) {
					const findAndInit = (targetId, initFunction) => {
						const targetNode = rootElement.querySelector(`#${targetId}`);
						if (targetNode) {
							const settings = JSON.parse(targetNode.dataset.settings);
							initFunction(targetNode.id, settings, onTestEnd(htmx));
						}
					};

					findAndInit('cpt-container', initCPT);
					findAndInit('dst-container', initDST);
					findAndInit('tmt-container', initTMT);
				}
				
				// --- MutationObserver to initialize tests added by HTMX ---
				const contentArea = document.getElementById('content');
				const observerCallback = (mutationsList, observer) => {
					for (const mutation of mutationsList) {
						if (mutation.type === 'childList') {
							for (const node of mutation.addedNodes) {
								if (node.nodeType === 1) { // Check if it's an element
									initializeCognitiveTests(node);
								}
							}
						}
					}
				};

				const observer = new MutationObserver(observerCallback);
				observer.observe(contentArea, { childList: true, subtree: true });

				// --- Initial check on page load ---
				// Run the initializer on the whole document once the page is ready.
				document.addEventListener('DOMContentLoaded', (event) => {
					initializeCognitiveTests(document);
				});

			</script>		
		</body>
	</html>
}